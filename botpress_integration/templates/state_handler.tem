class {{class_name}}StateHandler(InoftStateHandler):
    """node_name: {{node_name}}"""
    def handle(self) -> dict:
        {%- for path in paths %}
            {%- if loop.index == 1 %}
                {% if path.condition_type == "intent_name" %}
                    {%- if counts_used_condition_intent_names[path.condition_intent_name] < threshold_of_intent_use_to_create_a_condition %}

        if self.is_in_intent_names("{{path.condition_intent_name}}"):
                    {% else %}

        if {{path.condition_intent_name}}Condition(self).can_handle():
                    {%- endif %}
                    {%- filter indent(width=12) %}{% include "child_state_handler_condition.tem" %}{% endfilter %}
                {% elif path.condition_type == "data" %}

        if self.persistent_remember("{{path.condition_data_key}}") {{path.condition_statement}}:
                    {%- filter indent(width=12) %}{% include "child_state_handler_condition.tem" %}{% endfilter %}
                {% elif path.condition_type == "always" %}
                    {%- filter indent(width=8) %}{% include "child_state_handler_condition.tem" %}{% endfilter %}
                {% endif %}
            {% else %}

                {% if path.condition_type == "intent_name" %}
                    {%- if counts_used_condition_intent_names[path.condition_intent_name] < threshold_of_intent_use_to_create_a_condition %}
        elif self.is_in_intent_names("{{path.condition_intent_name}}"):
                    {% else %}
        elif {{path.condition_intent_name}}Condition(self).can_handle():
                    {%- endif %}
                    {%- filter indent(width=12) %}{% include "child_state_handler_condition.tem" %}{% endfilter %}
                {% elif path.condition_type == "data" %}
        elif self.persistent_remember("{{path.condition_data_key}}") {{path.condition_statement}}:
                    {%- filter indent(width=12) %}{% include "child_state_handler_condition.tem" %}{% endfilter %}
                {% elif path.condition_type == "always" %}
        else:
                    {%- filter indent(width=12) %}{% include "child_state_handler_condition.tem" %}{% endfilter %}
                {% endif %}
            {% endif %}
        {% endfor %}
        {% if paths|length == 0 %}

        pass
        {% endif %}

    def fallback(self) -> dict:
        self.say("You can say Yes or No and that's it")
        return self.to_platform_dict()

    def handle_resume(self) -> dict:
        return self.handle()

